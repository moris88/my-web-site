name: LLaMA Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review_code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Scarica tutta la cronologia git

      - name: Set the base and head commit
        id: set_commits
        run: |
          BASE_COMMIT=$(git merge-base HEAD ${{ github.event.pull_request.base.sha }})
          HEAD_COMMIT=${{ github.sha }}
          echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV
          echo "HEAD_COMMIT=$HEAD_COMMIT" >> $GITHUB_ENV

      - name: Get modified files
        id: get_modified_files
        run: |
          MODIFIED_FILES=$(git diff --name-only $BASE_COMMIT $HEAD_COMMIT)
          echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV

      - name: Analyze code with LLaMA (Hugging Face)
        id: llama-review
        run: |
          HF_API_URL="https://api-inference.huggingface.co/models/meta-llama/Llama-3.2-1B"
          HF_API_TOKEN="${{ secrets.HUGGINGFACE_API_TOKEN }}"

          ALL_REVIEWS=""
          # Loop through the modified files and send them to LLaMA for analysis
          IFS=',' read -r -a files <<< "$MODIFIED_FILES"
          for file in "${files[@]}"; do
            if [[ $file == *.js || $file == *.ts || $file == *.jsx || $file == *.tsx ]]; then
              echo "Reviewing $file"
              FILE_CONTENT=$(cat "$file")

              # Prepare JSON payload
              PAYLOAD=$(jq -n --arg content "$FILE_CONTENT" '{ "inputs": $content }')

              # Call Hugging Face API for LLaMA analysis
              REVIEW=$(curl -X POST "$HF_API_URL" \
              -H "Authorization: Bearer $HF_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD")

              # Extract relevant information from the response
              LOGIC_ERRORS=$(echo "$REVIEW" | jq -r '.logic_errors // "No logic errors found."')
              POTENTIAL_ISSUES=$(echo "$REVIEW" | jq -r '.potential_issues // "No potential issues found."')
              SUGGESTIONS=$(echo "$REVIEW" | jq -r '.suggestions // "No suggestions found."')

              # Append the review to ALL_REVIEWS
              ALL_REVIEWS+="### Review for $file\n\n"
              ALL_REVIEWS+="**Logic and Syntax Errors:**\n$LOGIC_ERRORS\n\n"
              ALL_REVIEWS+="**Potential Issues:**\n$POTENTIAL_ISSUES\n\n"
              ALL_REVIEWS+="**Suggestions:**\n$SUGGESTIONS\n\n"
            fi
          done
          echo "ALL_REVIEWS=$ALL_REVIEWS" >> $GITHUB_ENV

      - name: Create PR comment with LLaMA review
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## LLaMA Review

            Here are the insights for your code:
            ${{ env.ALL_REVIEWS }}

            _Review was generated by LLaMA via Hugging Face API._
