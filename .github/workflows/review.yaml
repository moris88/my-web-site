name: Gemini Code Review

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Diff
        id: get_diff
        run: |
            PR_NUMBER=${{ github.event.pull_request.number }}
            BASE_REF=${{ github.event.pull_request.base.sha }}
            HEAD_REF=${{ github.event.pull_request.head.sha }}
            DIFF=$(git diff "$BASE_REF" "$HEAD_REF")
        
            if [ -z "$DIFF" ]; then
                echo "::warning::No diff found for this PR. Gemini review will be skipped."
                echo "diff_output=" >> "$GITHUB_OUTPUT"
            else
                echo "diff_output<<EOF" >> "$GITHUB_OUTPUT"
                echo "$DIFF" >> "$GITHUB_OUTPUT"
                echo "EOF" >> "$GITHUB_OUTPUT"
            fi

      - name: Read Gemini Prompt from File
        id: read_prompt_file
        run: |
              PROMPT_FILE="review/gemini_instructions.md"
              if [ -f "$PROMPT_FILE" ]; then
                echo "prompt_content<<EOF" >> "$GITHUB_OUTPUT"
                cat "$PROMPT_FILE" >> "$GITHUB_OUTPUT"
                echo "EOF" >> "$GITHUB_OUTPUT"
              else
                echo "::warning file=$PROMPT_FILE::Prompt file not found. Using default prompt."
                echo "prompt_content=Perform a code review of the following diff. Identify potential bugs, performance improvements, code clarity, adherence to best practices, and suggest missing tests. Provide your suggestions in a concise and readable format." >> "$GITHUB_OUTPUT"
              fi
          

      - name: Delete Previous Gemini Review Comments
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const botName = 'github-actions[bot]';

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            for (const comment of comments) {
              if (comment.user.login === botName && comment.body.includes('')) {
                console.log(`Deleting comment ID: ${comment.id}`);
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
            }

      - name: Run Gemini Review Script (Bash)
        id: gemini_review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # The _RAW suffix is just a reminder that these are the direct outputs from previous steps
          PR_DIFF_RAW="${{ steps.get_diff.outputs.diff_output }}"
          GEMINI_PROMPT_RAW="${{ steps.read_prompt_file.outputs.prompt_content }}"

          TEMP_DIFF_FILE=$(mktemp)
          TEMP_PROMPT_FILE=$(mktemp)

          # Using printf to write content to temporary files for robustness
          printf "%s" "$PR_DIFF_RAW" > "$TEMP_DIFF_FILE"
          printf "%s" "$GEMINI_PROMPT_RAW" > "$TEMP_PROMPT_FILE"

          SCRIPT_PATH="review/gemini_review_script.sh"
          chmod +x "$SCRIPT_PATH"

          # Execute the script, passing file paths
          "$SCRIPT_PATH" "$TEMP_DIFF_FILE" "$TEMP_PROMPT_FILE" >> "$GITHUB_OUTPUT"

          rm "$TEMP_DIFF_FILE" "$TEMP_PROMPT_FILE"

      - name: Add New Gemini Review Comment to PR
        uses: actions/github-script@v7
        if: success() && steps.gemini_review.outputs.review_comment != ''
        with:
          script: |
            const comment = `${{ steps.gemini_review.outputs.review_comment }}`;
            const prNumber = context.payload.pull